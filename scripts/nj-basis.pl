#! /usr/bin/perl
use strict;

my $sml = $ARGV[0] || 'sml';

open(SIG, '>src/GENERATOR_SIG-nj.sml') or die 'cannot write sig';
open(GEN, '>src/RandGen-nj.sml') or die 'cannot write gen';

print SIG <<EOF;
(* DO NOT EDIT -- Generated by nj-basis.pl *)
  signature GENERATOR_SIG = sig
  include TEXT_GENERATOR
  val stream : stream
  structure DateTime : DATE_TIME_GENERATOR
EOF

print GEN <<EOF;
(* DO NOT EDIT -- Generated by nj-basis.pl *)
  functor GeneratorFn(R : APPLICATIVE_RNG) : GENERATOR_SIG =
  struct
    local
      structure Gen = BaseGeneratorFn(R)
      structure Gen = GenText(structure Gen=Gen structure Text=Text)
    in 
EOF

check_int('FixedInt');
check_int('Int');
check_int('Int4');
check_int('Int8');
check_int('Int16');
check_int('Int24');
check_int('Int31');
check_int('Int32');
check_int('Int48');
check_int('Int63');
check_int('Int64');
check_int('IntInf');
check_int('LargeInt');
check_int('Position');

check_real('LargeReal');
check_real('Real');
check_real('Real32');
check_real('Real64');

check_word('LargeWord');
check_word('SysWord');
check_word('Word');
check_word('Word4');
check_word('Word8');
check_word('Word16');
check_word('Word24');
check_word('Word31');
check_word('Word32');
check_word('Word48');
check_word('Word63');
check_word('Word64');
check_word('WordInf');

if(check_structure('WideText'))
{
    print SIG "structure WideText : TEXT_GENERATOR\n";
    print GEN "structure WideText = GenText(structure Gen=Gen structure Text=WideText)\n";
}

print SIG "end\n";

print GEN <<EOF;
    structure DateTime = GenDateTime(Gen)
    open Gen
    val stream = start (R.new())
  end (* local *)
  type rand = R.rand
  type 'a gen = rand -> 'a * rand
  type ('a, 'b) co = 'a -> 'b gen -> 'b gen
end
structure RandGen = GeneratorFn(Rand)
EOF

close(SIG);
close(GEN);

unlink('test.sml');
exit;

sub check_int
{
    my($i) = @_;
    if(check_structure($i))
    {
        print SIG "structure $i : INT_GENERATOR\n";
        print GEN "structure $i = GenInt(open Gen structure Int = $i)\n";
    }
}

sub check_real
{
    my($r) = @_;
    if(check_structure($r))
    {
        print SIG "structure $r : REAL_GENERATOR\n";
        print GEN "structure $r = GenReal(open Gen structure Real = $r)\n";
    }
}

sub check_word
{
    my($i) = @_;
    if(check_structure($i))
    {
        print SIG "structure $i : WORD_GENERATOR\n";
        print GEN "structure $i = GenWord(open Gen structure Word = $i)\n";
    }
}

sub check_structure 
{
    my($s) = @_;
    open(ML, '>test.sml') or die 'cannot write test.sml';
    print ML "TextIO.closeOut TextIO.stdErr;\n";
    print ML "structure S = $s\n";
    close(ML);
    my $r = system("$sml test.sml </dev/null >/dev/null");
    return !$r;
}

