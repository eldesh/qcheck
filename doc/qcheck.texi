\input texinfo
@c %**start of header
@setfilename qcheck.info
@settitle QCheck/SML
@c %**end of header

Copyright @copyright{} 2004 Christopher League.

@titlepage
@title QCheck/SML
@author Christopher League
@vskip 0pt plus1filll
@end titlepage
@contents

@ifnottex
@node Top, Intro, (dir), (dir)

@menu
* Intro::                       
* FileSys::                     
* Generating::                  
* Statistical::                 
* Pluggable::                   
* Tests::                       


@end menu

@end ifnottex

@c ----------------------------------------------------------------------------
@node Intro, FileSys, Top, Top
@chapter Introduction

I will demonstrate the use of QCheck with a simple example.  Let's
write a few tiny functions on integers: successor, even, and odd.

@transcript
fun succ x = x+1
fun even x = x mod 2 = 0
fun odd x = x mod 2 = 1
@end transcript

Now suppose we wish to test that some property holds for this
implementation.  For example, we know that the successor of an even
number should be odd.  We can specify ``the successor is odd'' as the
integer predicate @code{odd o succ}.  But since we expect this to be
true only for even numbers, it is a conditional property.  Using the
QCheck library, we specify it like this:

@transcript omit
open QCheck
@end transcript

@transcript quiet
infix ==>
@end transcript

@transcript
val succ_even_odd = even ==> odd o succ
@end transcript

This value has type @code{int prop}.  To test it, we need to specify a
source of integer test cases.  We could type a bunch of them into a
file and use that, but why not just generate them randomly?
@code{Gen.Int.int} (of type @code{int Gen.gen}) generates random
integers.  The following pair is useful for checking any integer
property:

@example
val i = (Gen.Int.int, SOME Int.toString)
@end example

@node FileSys, Generating, Intro, Top
@chapter Reading test cases from the file system

@node Generating, Statistical, FileSys, Top
@chapter Generating test cases randomly

@node Statistical, Pluggable, Generating, Top
@chapter Statistical distribution

@node Pluggable, Tests, Statistical, Top
@chapter Pluggable output styles

@node Tests,  , Pluggable, Top
@chapter Guide to tests directory

@bye
